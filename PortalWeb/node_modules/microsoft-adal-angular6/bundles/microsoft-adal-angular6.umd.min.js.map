{"version":3,"sources":["ng://microsoft-adal-angular6/src/ms-adal-angular6.service.ts","ng://microsoft-adal-angular6/src/authentication-guard.ts","ng://microsoft-adal-angular6/src/ms-adal-angular6.module.ts"],"names":["MsAdalAngular6Service","adalConfig","this","context","adalLib.inject","handleCallback","prototype","isAuthenticated","getCachedUser","userName","profile","name","login","logout","logOut","GetResourceForEndpoint","url","resource","getResourceForEndpoint","clientId","RenewToken","clearCacheForResource","acquireToken","errorMessage","_this","bindCallback","cb","s","error","tokenOut","token","getToken","key","cacheLocation","localStorage","getItem","sessionStorage","handleWindowCallback","getCachedToken","userInfo","accessToken","Injectable","args","providedIn","Inject","AuthenticationGuard","adalSvc","canActivate","route","state","canActivateChild","childRoute","MsAdalAngular6Module","forRoot","ngModule","providers","provide","useValue","NgModule","imports","declarations","exports"],"mappings":"wWACA,IAAAA,EAAA,WAUE,SAAAA,EAA0CC,GACd,mBADcC,KAAAD,WAAAA,KAEtCC,KAAKD,WAAaA,KAEpBC,KAAKC,QAAUC,EAAAA,OAAeF,KAAKD,YACnCC,KAAKG,8CAGIL,EAAAM,UAAA,oBAAiB,gBAC1B,OAAIJ,KAAKK,gBACAL,KAAKC,QAAQK,gBAAgBC,SAE/B,0DAGET,EAAAM,UAAA,mBAAgB,gBACzB,OAAIJ,KAAKK,gBACAL,KAAKC,QAAQK,gBAAgBE,QAAQC,KAEvC,oCAGFX,EAAAM,UAAAM,iBACLV,KAAKC,QAAQS,SAGRZ,EAAAM,UAAAO,kBACLX,KAAKC,QAAQW,UAGRd,EAAAM,UAAAS,gCAAuBC,GAC5B,IAAIC,EAAW,KAOf,OANID,KACFC,EAAWf,KAAKC,QAAQe,uBAAuBF,MAE7CC,EAAWf,KAAKD,WAAWkB,WAGxBF,GAGFjB,EAAAM,UAAAc,oBAAWJ,GAChB,IAAIC,EAAWf,KAAKa,uBAAuBC,GAC3C,OAAOd,KAAKC,QAAQkB,sBAAsBJ,IAGrCjB,EAAAM,UAAAgB,sBAAaN,GAClB,IACIO,EADEC,EAAQtB,KAGd,OAAOuB,EAAAA,aAOP,SAA8BC,GAC5B,IACIT,EADAU,EAAY,KAchB,OAZAV,EAAWO,EAAMT,uBAAuBC,GAExCQ,EAAMrB,QAAQmB,aAAaL,EAAU,SAACW,EAAeC,GAC/CD,GACFJ,EAAMrB,QAAQyB,MAAM,4CAA8CX,EAAUW,GAC5EL,EAAeK,EACfF,EAAE,QAEFA,EAAGG,GACHF,EAAIE,KAGDF,GAtBiC,SAACG,GACzC,IAAKA,GAASP,EACZ,MAAA,EAEF,OAAOO,GAJFL,IA0BFzB,EAAAM,UAAAyB,kBAASf,GAEd,IAEIgB,EAFEf,EAAWf,KAAKC,QAAQe,uBAAuBF,GAQrD,OAJEgB,EADEf,EACI,wBAA0BA,EAE1B,eAEQ,iBAPAf,KAAKD,WAAWgC,cAQvBC,aAAaC,QAAQH,GAErBI,eAAeD,QAAQH,IAIlChC,EAAAM,UAAAD,eAAA,WACEH,KAAKC,QAAQkC,8CAGJrC,EAAAM,UAAA,WAAQ,gBACjB,OAAOJ,KAAKC,QAAQK,uEAGXR,EAAAM,UAAA,cAAW,gBACpB,OAAOJ,KAAKC,QAAQmC,eAAepC,KAAKD,WAAWkB,iEAG1CnB,EAAAM,UAAA,kBAAe,gBACxB,SAAQJ,KAAKqC,WAAYrC,KAAKsC,kEAhHjCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,gFAKCC,EAAAA,OAAMF,KAAA,CAAC,gJAVtB,GCDAG,EAAA,WAMI,SAAAA,EAAoBC,GAAA5C,KAAA4C,QAAAA,SAEbD,EAAAvC,UAAAyC,qBAAYC,EAA+BC,GAC9C,QAAI/C,KAAK4C,QAAQvC,kBAGbL,KAAK4C,QAAQlC,SACN,IAIRiC,EAAAvC,UAAA4C,0BAAiBC,EAAoCF,GACxD,OAAO/C,KAAK6C,YAAYI,EAAYF,wBAd3CR,EAAAA,sDAFQzC,OAFT,GCAAoD,EAAA,gCAUSA,EAAAC,QAAP,SAAepD,GACb,MAAO,CACLqD,SAAUF,EACVG,UAAW,CAACvD,EAAuB,CAAEwD,QAAS,aAAcC,SAAUxD,0BAT3EyD,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,QAAS,GACTC,aAAc,GACdC,QAAS,SAPX","sourcesContent":["/// <reference path='./../../../node_modules/@types/adal/index.d.ts'/>\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, bindCallback } from 'rxjs';\nimport * as adalLib from 'adal-angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MsAdalAngular6Service {\n  private context: adal.AuthenticationContext;\n\n  constructor(@Inject('adalConfig') private adalConfig: any) {\n    if (typeof adalConfig === 'function') {\n      this.adalConfig = adalConfig();\n    } \n    this.context = adalLib.inject(this.adalConfig);\n    this.handleCallback();\n  }\n\n  public get LoggedInUserEmail() {\n    if (this.isAuthenticated) {\n      return this.context.getCachedUser().userName;\n    }\n    return '';\n  }\n\n  public get LoggedInUserName() {\n    if (this.isAuthenticated) {\n      return this.context.getCachedUser().profile.name;\n    }\n    return '';\n  }\n\n  public login() {\n    this.context.login();\n  }\n\n  public logout() {\n    this.context.logOut();\n  }\n\n  public GetResourceForEndpoint(url: string): string {\n    let resource = null;\n    if (url) {\n      resource = this.context.getResourceForEndpoint(url);\n      if (!resource) {\n        resource = this.adalConfig.clientId;\n      }\n    }\n    return resource;\n  }\n\n  public RenewToken(url: string) {\n    let resource = this.GetResourceForEndpoint(url);\n    return this.context.clearCacheForResource(resource); // Trigger the ADAL token renew \n  }\n\n  public acquireToken(url: string) {\n    const _this = this;   // save outer this for inner function\n    let errorMessage: string;\n\n    return bindCallback(acquireTokenInternal, (token: string) => {\n      if (!token && errorMessage) {\n        throw (errorMessage);\n      }\n      return token;\n    })();\n\n    function acquireTokenInternal(cb: any) {\n      let s: string = null;\n      let resource: string;\n      resource = _this.GetResourceForEndpoint(url);\n\n      _this.context.acquireToken(resource, (error: string, tokenOut: string) => {\n        if (error) {\n          _this.context.error('Error when acquiring token for resource: ' + resource, error);\n          errorMessage = error;\n          cb(null as string);\n        } else {\n          cb(tokenOut);\n          s = tokenOut;\n        }\n      });\n      return s;\n    }\n  }\n\n  public getToken(url: string): string {\n\n    const resource = this.context.getResourceForEndpoint(url);\n    const storage = this.adalConfig.cacheLocation;\n    let key;\n    if (resource) {\n      key = 'adal.access.token.key' + resource;\n    } else {\n      key = 'adal.idtoken';\n    }\n    if (storage === 'localStorage') {\n      return localStorage.getItem(key);\n    } else {\n      return sessionStorage.getItem(key);\n    }\n  }\n\n  handleCallback() {\n    this.context.handleWindowCallback();\n  }\n\n  public get userInfo() {\n    return this.context.getCachedUser();\n  }\n\n  public get accessToken() {\n    return this.context.getCachedToken(this.adalConfig.clientId);\n  }\n\n  public get isAuthenticated(): boolean {\n    return (this.userInfo && this.accessToken) ? true : false;\n  }\n}","import { Injectable } from \"@angular/core\";\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { MsAdalAngular6Service } from \"./ms-adal-angular6.service\";\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate, CanActivateChild {\n    constructor(private adalSvc: MsAdalAngular6Service) { }\n\n    public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.adalSvc.isAuthenticated) {\n            return true;\n        } else {\n            this.adalSvc.login();\n            return false;\n        }\n    }\n\n    public canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(childRoute, state);\n    }\n}","import { NgModule } from '@angular/core';\nimport { ModuleWithProviders } from '@angular/core';\nimport { MsAdalAngular6Service } from './ms-adal-angular6.service';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class MsAdalAngular6Module { \n  static forRoot(adalConfig: any): ModuleWithProviders {\n    return {\n      ngModule: MsAdalAngular6Module,\n      providers: [MsAdalAngular6Service, { provide: 'adalConfig', useValue: adalConfig }]\n    };\n  }\n}"]}