{"version":3,"file":"microsoft-adal-angular6.umd.js.map","sources":["ng://microsoft-adal-angular6/src/ms-adal-angular6.service.ts","ng://microsoft-adal-angular6/src/authentication-guard.ts","ng://microsoft-adal-angular6/src/ms-adal-angular6.module.ts"],"sourcesContent":["/// <reference path='./../../../node_modules/@types/adal/index.d.ts'/>\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, bindCallback } from 'rxjs';\nimport * as adalLib from 'adal-angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MsAdalAngular6Service {\n  private context: adal.AuthenticationContext;\n\n  constructor(@Inject('adalConfig') private adalConfig: any) {\n    if (typeof adalConfig === 'function') {\n      this.adalConfig = adalConfig();\n    } \n    this.context = adalLib.inject(this.adalConfig);\n    this.handleCallback();\n  }\n\n  public get LoggedInUserEmail() {\n    if (this.isAuthenticated) {\n      return this.context.getCachedUser().userName;\n    }\n    return '';\n  }\n\n  public get LoggedInUserName() {\n    if (this.isAuthenticated) {\n      return this.context.getCachedUser().profile.name;\n    }\n    return '';\n  }\n\n  public login() {\n    this.context.login();\n  }\n\n  public logout() {\n    this.context.logOut();\n  }\n\n  public GetResourceForEndpoint(url: string): string {\n    let resource = null;\n    if (url) {\n      resource = this.context.getResourceForEndpoint(url);\n      if (!resource) {\n        resource = this.adalConfig.clientId;\n      }\n    }\n    return resource;\n  }\n\n  public RenewToken(url: string) {\n    let resource = this.GetResourceForEndpoint(url);\n    return this.context.clearCacheForResource(resource); // Trigger the ADAL token renew \n  }\n\n  public acquireToken(url: string) {\n    const _this = this;   // save outer this for inner function\n    let errorMessage: string;\n\n    return bindCallback(acquireTokenInternal, (token: string) => {\n      if (!token && errorMessage) {\n        throw (errorMessage);\n      }\n      return token;\n    })();\n\n    function acquireTokenInternal(cb: any) {\n      let s: string = null;\n      let resource: string;\n      resource = _this.GetResourceForEndpoint(url);\n\n      _this.context.acquireToken(resource, (error: string, tokenOut: string) => {\n        if (error) {\n          _this.context.error('Error when acquiring token for resource: ' + resource, error);\n          errorMessage = error;\n          cb(null as string);\n        } else {\n          cb(tokenOut);\n          s = tokenOut;\n        }\n      });\n      return s;\n    }\n  }\n\n  public getToken(url: string): string {\n\n    const resource = this.context.getResourceForEndpoint(url);\n    const storage = this.adalConfig.cacheLocation;\n    let key;\n    if (resource) {\n      key = 'adal.access.token.key' + resource;\n    } else {\n      key = 'adal.idtoken';\n    }\n    if (storage === 'localStorage') {\n      return localStorage.getItem(key);\n    } else {\n      return sessionStorage.getItem(key);\n    }\n  }\n\n  handleCallback() {\n    this.context.handleWindowCallback();\n  }\n\n  public get userInfo() {\n    return this.context.getCachedUser();\n  }\n\n  public get accessToken() {\n    return this.context.getCachedToken(this.adalConfig.clientId);\n  }\n\n  public get isAuthenticated(): boolean {\n    return (this.userInfo && this.accessToken) ? true : false;\n  }\n}","import { Injectable } from \"@angular/core\";\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { MsAdalAngular6Service } from \"./ms-adal-angular6.service\";\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate, CanActivateChild {\n    constructor(private adalSvc: MsAdalAngular6Service) { }\n\n    public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.adalSvc.isAuthenticated) {\n            return true;\n        } else {\n            this.adalSvc.login();\n            return false;\n        }\n    }\n\n    public canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(childRoute, state);\n    }\n}","import { NgModule } from '@angular/core';\nimport { ModuleWithProviders } from '@angular/core';\nimport { MsAdalAngular6Service } from './ms-adal-angular6.service';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class MsAdalAngular6Module { \n  static forRoot(adalConfig: any): ModuleWithProviders {\n    return {\n      ngModule: MsAdalAngular6Module,\n      providers: [MsAdalAngular6Service, { provide: 'adalConfig', useValue: adalConfig }]\n    };\n  }\n}"],"names":["adalLib.inject","bindCallback","Injectable","Inject","NgModule"],"mappings":"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"}
