/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { bindCallback } from 'rxjs';
import * as adalLib from 'adal-angular';
import * as i0 from "@angular/core";
export class MsAdalAngular6Service {
    /**
     * @param {?} adalConfig
     */
    constructor(adalConfig) {
        this.adalConfig = adalConfig;
        if (typeof adalConfig === 'function') {
            this.adalConfig = adalConfig();
        }
        this.context = adalLib.inject(this.adalConfig);
        this.handleCallback();
    }
    /**
     * @return {?}
     */
    get LoggedInUserEmail() {
        if (this.isAuthenticated) {
            return this.context.getCachedUser().userName;
        }
        return '';
    }
    /**
     * @return {?}
     */
    get LoggedInUserName() {
        if (this.isAuthenticated) {
            return this.context.getCachedUser().profile.name;
        }
        return '';
    }
    /**
     * @return {?}
     */
    login() {
        this.context.login();
    }
    /**
     * @return {?}
     */
    logout() {
        this.context.logOut();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    GetResourceForEndpoint(url) {
        let /** @type {?} */ resource = null;
        if (url) {
            resource = this.context.getResourceForEndpoint(url);
            if (!resource) {
                resource = this.adalConfig.clientId;
            }
        }
        return resource;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    RenewToken(url) {
        let /** @type {?} */ resource = this.GetResourceForEndpoint(url);
        return this.context.clearCacheForResource(resource); // Trigger the ADAL token renew
    }
    /**
     * @param {?} url
     * @return {?}
     */
    acquireToken(url) {
        const /** @type {?} */ _this = this; // save outer this for inner function
        let /** @type {?} */ errorMessage;
        return bindCallback(acquireTokenInternal, (token) => {
            if (!token && errorMessage) {
                throw (errorMessage);
            }
            return token;
        })();
        /**
         * @param {?} cb
         * @return {?}
         */
        function acquireTokenInternal(cb) {
            let /** @type {?} */ s = null;
            let /** @type {?} */ resource;
            resource = _this.GetResourceForEndpoint(url);
            _this.context.acquireToken(resource, (error, tokenOut) => {
                if (error) {
                    _this.context.error('Error when acquiring token for resource: ' + resource, error);
                    errorMessage = error;
                    cb(/** @type {?} */ (null));
                }
                else {
                    cb(tokenOut);
                    s = tokenOut;
                }
            });
            return s;
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getToken(url) {
        const /** @type {?} */ resource = this.context.getResourceForEndpoint(url);
        const /** @type {?} */ storage = this.adalConfig.cacheLocation;
        let /** @type {?} */ key;
        if (resource) {
            key = 'adal.access.token.key' + resource;
        }
        else {
            key = 'adal.idtoken';
        }
        if (storage === 'localStorage') {
            return localStorage.getItem(key);
        }
        else {
            return sessionStorage.getItem(key);
        }
    }
    /**
     * @return {?}
     */
    handleCallback() {
        this.context.handleWindowCallback();
    }
    /**
     * @return {?}
     */
    get userInfo() {
        return this.context.getCachedUser();
    }
    /**
     * @return {?}
     */
    get accessToken() {
        return this.context.getCachedToken(this.adalConfig.clientId);
    }
    /**
     * @return {?}
     */
    get isAuthenticated() {
        return (this.userInfo && this.accessToken) ? true : false;
    }
}
MsAdalAngular6Service.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
MsAdalAngular6Service.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['adalConfig',] },] },
];
/** @nocollapse */ MsAdalAngular6Service.ngInjectableDef = i0.defineInjectable({ factory: function MsAdalAngular6Service_Factory() { return new MsAdalAngular6Service(i0.inject("adalConfig")); }, token: MsAdalAngular6Service, providedIn: "root" });
function MsAdalAngular6Service_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MsAdalAngular6Service.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MsAdalAngular6Service.ctorParameters;
    /** @type {?} */
    MsAdalAngular6Service.prototype.context;
    /** @type {?} */
    MsAdalAngular6Service.prototype.adalConfig;
}

//# sourceMappingURL=data:application/json;base64,