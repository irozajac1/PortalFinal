/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { bindCallback } from 'rxjs';
import * as adalLib from 'adal-angular';
import * as i0 from "@angular/core";
var MsAdalAngular6Service = /** @class */ (function () {
    function MsAdalAngular6Service(adalConfig) {
        this.adalConfig = adalConfig;
        if (typeof adalConfig === 'function') {
            this.adalConfig = adalConfig();
        }
        this.context = adalLib.inject(this.adalConfig);
        this.handleCallback();
    }
    Object.defineProperty(MsAdalAngular6Service.prototype, "LoggedInUserEmail", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.isAuthenticated) {
                return this.context.getCachedUser().userName;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MsAdalAngular6Service.prototype, "LoggedInUserName", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.isAuthenticated) {
                return this.context.getCachedUser().profile.name;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MsAdalAngular6Service.prototype.login = /**
     * @return {?}
     */
    function () {
        this.context.login();
    };
    /**
     * @return {?}
     */
    MsAdalAngular6Service.prototype.logout = /**
     * @return {?}
     */
    function () {
        this.context.logOut();
    };
    /**
     * @param {?} url
     * @return {?}
     */
    MsAdalAngular6Service.prototype.GetResourceForEndpoint = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var /** @type {?} */ resource = null;
        if (url) {
            resource = this.context.getResourceForEndpoint(url);
            if (!resource) {
                resource = this.adalConfig.clientId;
            }
        }
        return resource;
    };
    /**
     * @param {?} url
     * @return {?}
     */
    MsAdalAngular6Service.prototype.RenewToken = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var /** @type {?} */ resource = this.GetResourceForEndpoint(url);
        return this.context.clearCacheForResource(resource); // Trigger the ADAL token renew
    };
    /**
     * @param {?} url
     * @return {?}
     */
    MsAdalAngular6Service.prototype.acquireToken = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var /** @type {?} */ _this = this; // save outer this for inner function
        var /** @type {?} */ errorMessage;
        return bindCallback(acquireTokenInternal, function (token) {
            if (!token && errorMessage) {
                throw (errorMessage);
            }
            return token;
        })();
        /**
         * @param {?} cb
         * @return {?}
         */
        function acquireTokenInternal(cb) {
            var /** @type {?} */ s = null;
            var /** @type {?} */ resource;
            resource = _this.GetResourceForEndpoint(url);
            _this.context.acquireToken(resource, function (error, tokenOut) {
                if (error) {
                    _this.context.error('Error when acquiring token for resource: ' + resource, error);
                    errorMessage = error;
                    cb(/** @type {?} */ (null));
                }
                else {
                    cb(tokenOut);
                    s = tokenOut;
                }
            });
            return s;
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    MsAdalAngular6Service.prototype.getToken = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var /** @type {?} */ resource = this.context.getResourceForEndpoint(url);
        var /** @type {?} */ storage = this.adalConfig.cacheLocation;
        var /** @type {?} */ key;
        if (resource) {
            key = 'adal.access.token.key' + resource;
        }
        else {
            key = 'adal.idtoken';
        }
        if (storage === 'localStorage') {
            return localStorage.getItem(key);
        }
        else {
            return sessionStorage.getItem(key);
        }
    };
    /**
     * @return {?}
     */
    MsAdalAngular6Service.prototype.handleCallback = /**
     * @return {?}
     */
    function () {
        this.context.handleWindowCallback();
    };
    Object.defineProperty(MsAdalAngular6Service.prototype, "userInfo", {
        get: /**
         * @return {?}
         */
        function () {
            return this.context.getCachedUser();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MsAdalAngular6Service.prototype, "accessToken", {
        get: /**
         * @return {?}
         */
        function () {
            return this.context.getCachedToken(this.adalConfig.clientId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MsAdalAngular6Service.prototype, "isAuthenticated", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.userInfo && this.accessToken) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    MsAdalAngular6Service.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    MsAdalAngular6Service.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['adalConfig',] },] },
    ]; };
    /** @nocollapse */ MsAdalAngular6Service.ngInjectableDef = i0.defineInjectable({ factory: function MsAdalAngular6Service_Factory() { return new MsAdalAngular6Service(i0.inject("adalConfig")); }, token: MsAdalAngular6Service, providedIn: "root" });
    return MsAdalAngular6Service;
}());
export { MsAdalAngular6Service };
function MsAdalAngular6Service_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MsAdalAngular6Service.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MsAdalAngular6Service.ctorParameters;
    /** @type {?} */
    MsAdalAngular6Service.prototype.context;
    /** @type {?} */
    MsAdalAngular6Service.prototype.adalConfig;
}

//# sourceMappingURL=data:application/json;base64,